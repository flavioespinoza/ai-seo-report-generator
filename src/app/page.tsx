'use client';

import { useState, useEffect } from 'react';
import UrlInputForm from '@/components/UrlInputForm';
import SeoReport from '@/components/SeoReport';
import ReportHistory from '@/components/ReportHistory';
import ErrorAlert from '@/components/ErrorAlert';

interface Report {
  id?: number;
  url: string;
  metadata: {
    pageTitle: string | null;
    metaDescription: string | null;
    metaKeywords: string | null;
    h1Tags: string[];
    imageCount: number;
    hasFavicon: boolean;
    titleLength?: number;
    descriptionLength?: number;
  };
  aiFeedback: string;
  createdAt?: string;
}

interface ReportSummary {
  id: number;
  url: string;
  pageTitle: string | null;
  metaDescription: string | null;
  createdAt: string;
  hasIssues: boolean;
}

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [currentReport, setCurrentReport] = useState<Report | null>(null);
  const [reportHistory, setReportHistory] = useState<ReportSummary[]>([]);
  const [historyLoading, setHistoryLoading] = useState(true);

  useEffect(() => {
    fetchReportHistory();
  }, []);

  const fetchReportHistory = async () => {
    try {
      setHistoryLoading(true);
      const response = await fetch('/api/reports');
      const data = await response.json();

      if (data.success) {
        setReportHistory(data.reports);
      }
    } catch (err) {
      console.error('Failed to fetch report history:', err);
    } finally {
      setHistoryLoading(false);
    }
  };

  const handleAnalyze = async (url: string) => {
    setLoading(true);
    setError(null);
    setCurrentReport(null);

    try {
      const response = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to analyze website');
      }

      if (data.success && data.report) {
        setCurrentReport(data.report);
        await fetchReportHistory();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unexpected error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleSelectReport = async (id: number) => {
    try {
      const response = await fetch(`/api/reports/${id}`);
      const data = await response.json();

      if (data.success && data.report) {
        setCurrentReport(data.report);
        setError(null);
      }
    } catch (err) {
      setError('Failed to load report');
    }
  };

  const handleDeleteReport = async (id: number) => {
    try {
      const response = await fetch(`/api/reports/${id}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        if (currentReport?.id === id) {
          setCurrentReport(null);
        }
        await fetchReportHistory();
      }
    } catch (err) {
      setError('Failed to delete report');
    }
  };

  const handleExportReport = () => {
    if (!currentReport) return;

    const markdown = generateMarkdownReport(currentReport);
    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `seo-report-${Date.now()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateMarkdownReport = (report: Report): string => {
    const { metadata, aiFeedback, url, createdAt } = report;
    
    return `# SEO Analysis Report

**Website:** ${url}
**Generated:** ${createdAt ? new Date(createdAt).toLocaleString() : 'N/A'}

## Page Metadata

### Page Title
${metadata.pageTitle || 'Not found'}
${metadata.titleLength ? `(${metadata.titleLength} characters)` : ''}

### Meta Description
${metadata.metaDescription || 'Not found'}
${metadata.descriptionLength ? `(${metadata.descriptionLength} characters)` : ''}

### H1 Tags
${metadata.h1Tags.length > 0 ? metadata.h1Tags.map(tag => `- ${tag}`).join('\n') : 'None found'}

### Additional Information
- **Images:** ${metadata.imageCount}
- **Favicon:** ${metadata.hasFavicon ? 'Present' : 'Missing'}
${metadata.metaKeywords ? `- **Meta Keywords:** ${metadata.metaKeywords}` : ''}

## AI-Powered SEO Analysis

${aiFeedback}

---
*Report generated by SEO Report Generator*
`;
  };

  return (
    <main className="min-h-screen py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-900 mb-3">
            SEO Report Generator
          </h1>
          <p className="text-lg text-gray-600">
            AI-powered website analysis to improve your search engine optimization
          </p>
        </div>

        <div className="mb-8">
          <UrlInputForm onAnalyze={handleAnalyze} loading={loading} />
        </div>

        {error && (
          <div className="mb-8">
            <ErrorAlert message={error} onDismiss={() => setError(null)} />
          </div>
        )}

        {currentReport && (
          <div className="mb-8">
            <SeoReport report={currentReport} onExport={handleExportReport} />
          </div>
        )}

        <div className="max-w-3xl mx-auto">
          <ReportHistory
            reports={reportHistory}
            onSelectReport={handleSelectReport}
            onDeleteReport={handleDeleteReport}
            loading={historyLoading}
          />
        </div>

        <footer className="mt-16 text-center text-sm text-gray-500">
          <p>Built with Next.js, TypeScript, and OpenAI</p>
        </footer>
      </div>
    </main>
  );
}
